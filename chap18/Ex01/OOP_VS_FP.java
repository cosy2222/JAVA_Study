package chap18.Ex01;


// 1. 자바는 객체지향프로그램 (OOP) : 모든 함수 (메소드) 는 객체내부에 존재해야 한다 
//		 람다식 : 자바에서 함수형 프로그래밍이 가능하도록 지원해주는 하나의 기능.
//				- 기존의 구현됨 메소드를 재정의하는것이 아니라 구현부가 없는 메소드에 람다식으로 기능을 부여해서 작동시키는 문법
//				- 람다식은 가능한한 축약된 문법을 사용 (생략가능한 것은 최대한 생략)
//				- 람다식은 자바에서 내부적으로 익명클래스로 변환되어 처리됩니다
//  			- 람다식은 함수형 인터페이스에서 익명클래스로 변환이 가능하다 
//  			- 람다식은 함수형인터페이스의 구현된 익명클래스를 람다식으로 축약 
//		 		- 함수형 인터페이스 : 인터페이스에 단 한개의 추상클래스가 정의된 인터페이스


@FunctionalInterface   // @FunctionalInterface  : 함수형 인터페이스를 선언 (추상메소드가 1개)
interface A{		// <== 함수형 인터페이스 
	void abc();
}

//인터페이스의 정의된 메소드를 구현하는 방법 1 : 인터페이스의 메소드를 구현하는 클래스를 생성

class B implements A{
	@Override
	public void abc() {
		System.out.println("메소드 내용 1");
	}
}


public class OOP_VS_FP {

	public static void main(String[] args) {
		
		// 객체지향 프로그래밍 문법 1. (class를 생성해서 사용) : 모든 메소드는 객체내부에 존재하며 객체를 생성후 호출가능
		A a1 = new B();
		a1.abc();
		
		
		// 객체 지향 프로그래밍 문법 2. (익명이너클래스를 생성해서 사용)
		A a2 = new A() {

			@Override
			public void abc() {
				System.out.println("메소드 내용 2");
			}
			
		};
		
		a2.abc();
		
		
		// 람다식(함수적) 프로그랠밍 문법 (람다식)  (case3)
		
		A a3 = () -> {System.out.println("메소드 내용3");};    // <== 람다식에 사용되는 인터페으스는 함수형 인터페이스 여야 한다 
		
		a3.abc();
		
		
		
		
		
		
		
		
		
		
		
		

	}

}
